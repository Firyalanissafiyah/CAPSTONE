# -*- coding: utf-8 -*-
"""Data Preprocessing

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UYBrVNNPuv34H1__I2jjHECfLAEXfX7K

#**TripMate**

## **1. Import Library**
"""

# For data processing
import pandas as pd
import numpy as np

# For data visualization
import seaborn as sns
import matplotlib.pyplot as plt

# For modelling
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity

"""##**2. Upload Dataset**"""

# URL of raw file dataset in GitHub repository
place = 'https://raw.githubusercontent.com/Firyalanissafiyah/CAPSTONE/main/dataset/tourism_with_id.csv'
rating = 'https://raw.githubusercontent.com/Firyalanissafiyah/CAPSTONE/main/dataset/tourism_rating.csv'
user = 'https://raw.githubusercontent.com/Firyalanissafiyah/CAPSTONE/main/dataset/user.csv'

"""##**3. Data Preprocessing**

**a. Place**
"""

# Load data 'place' from URL to DataFrame
place = pd.read_csv(place)

# Viewing overview of the 'place' data
place.head()

# Dropping unused columns
place = place.drop(['Unnamed: 11','Unnamed: 12', 'Time_Minutes', 'Coordinate', 'Lat', 'Long'], axis=1)
place.head(3)

# Delete rows that have a value of 0 in the Price column
place = place[place['Price'] != 0]
place.head(10)

# Information about the DataFrame 'place'
place.info()

"""**b. Rating**"""

# Load 'rating' data from URL to DataFrame
rating = pd.read_csv(rating)

# Viewing overview of the rating data
rating.head(3)

# Information about the DataFrame 'rating'
rating.info()

# Filtering the rating data to include only ratings for tourist attractions
place_rating = pd.merge(rating, place[['Place_Id', 'Category', 'City', 'Price', 'Place_Name']], on='Place_Id', how='left')
place_rating

# Information about shape of 'place_rating' DataFrame
place_rating.shape

# Information about the DataFrame 'place_rating'
place_rating.info()

"""**c. User**"""

# Load data 'user' from URL to DataFrame
user = pd.read_csv(user)

# Viewing overview of the user data
user.head()

# Viewing the dataset of users who have rated tourist attractions in Bandung City
user.shape

"""##**4. Exploratory Data**"""

# Create a visualization of the number of tourist attractions rating
count = place_rating['Place_Ratings'].value_counts()
percent = 100 * place_rating['Place_Ratings'].value_counts(normalize = True)
df = pd.DataFrame({'Jumlah rating' : count, 'Persentase' : percent.round(1)})
print(df)
sns.countplot(x = place_rating['Place_Ratings'], data = place_rating, order = place_rating['Place_Ratings'].value_counts().index)
plt.title('Jumlah Rating Tempat Wisata', pad=15)
plt.xlabel('Rating')
plt.ylabel('Jumlah User')
plt.show()

# Create a visualization of the number of tourist categories based on the number of ratings
count = place_rating['Category'].value_counts()
percent = 100 * place_rating['Category'].value_counts(normalize = True)
df = pd.DataFrame({'Jumlah rating' : count, 'Persentase' : percent.round(1)})
print(df)
sns.countplot(y = place_rating['Category'], data = place_rating, order = place_rating['Category'].value_counts().index)
plt.title('Perbandingan Jumlah Kategori Wisata', pad=15)
plt.xlabel('Jumlah Wisata')
plt.ylabel('Kategori')
plt.show()

# Create a visualization of user age distribution
plt.figure(figsize=(5,3))
sns.boxplot(user['Age']);
plt.title('Distribusi Usia User', pad=15)
plt.ylabel('Usia')
plt.show()

# Create a visualization of tourist attraction price distribution
plt.figure(figsize=(7,3))
sns.boxplot(place_rating['Price'])
plt.title('Distribusi Tiket Masuk Wisata', pad=15)
plt.ylabel('Harga')
plt.show()

# Filtering the city origin of the user
asal_kota = user['Location'].apply(lambda x : x.split(',')[0])

# Visualization of the city of origin of the user
plt.figure(figsize=(8,6))
sns.countplot(y=asal_kota)
plt.title('Jumlah Asal Kota dari User')
plt.xlabel('Jumlah')
plt.ylabel('Asal Kota')
plt.show()

"""## **5. Data Preparation**"""

# Check null value
place_rating.isnull().sum()

# Delete rows that have NaN values in the 'Place_Name' column
place_rating = place_rating.dropna(subset=['Place_Name'])

# Count the number of Place_Id in place_rating dataset
len(place_rating.Place_Id.unique())

# Read dataset for encoding
tourism = place_rating.copy()
tourism.head()

# Delete duplicates of tourism dataset
tourism = tourism.drop_duplicates('Place_Id')
tourism

tourism.to_csv('place_rating_cleaned.csv', index=False)

from google.colab import files
files.download('place_rating_cleaned.csv')